FROM python:3.11-slim

# Устанавливаем переменные окружения
ENV PYTHONUNBUFFERED=1
ENV DISPLAY=:99

# Обновляем систему и устанавливаем базовые зависимости
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        wget \
        gnupg \
        apt-transport-https \
        lsb-release \
        unzip \
        xvfb \
        sudo \
        gosu \
        && rm -rf /var/lib/apt/lists/*

# Устанавливаем Chromium и ChromeDriver
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        chromium \
        chromium-driver \
        && rm -rf /var/lib/apt/lists/*

# Создаем символические ссылки для совместимости
RUN ln -sf /usr/bin/chromium /usr/bin/google-chrome && \
    ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver

# Создаем пользователя для запуска приложения
RUN groupadd -r appuser && \
    useradd -r -g appuser -G audio,video appuser && \
    mkdir -p /home/appuser && \
    chown -R appuser:appuser /home/appuser && \
    echo "appuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Устанавливаем дополнительные зависимости
RUN apt-get update && apt-get install -y --no-install-recommends \
        procps \
        gcc \
        fonts-liberation \
        libasound2 \
        libatk-bridge2.0-0 \
        libdrm2 \
        libgtk-3-0 \
        libnspr4 \
        libnss3 \
        libxcomposite1 \
        libxdamage1 \
        libxrandr2 \
        libxss1 \
        libxtst6 \
        xdg-utils \
        libpq-dev \
        postgresql-client \
        && rm -rf /var/lib/apt/lists/*

# Устанавливаем рабочую директорию
WORKDIR /app

# Создаем структуру директорий с правильными правами
RUN mkdir -p /app/media/uploads /app/media/results /app/media/temp /app/static && \
    chown -R appuser:appuser /app && \
    chmod -R 775 /app/media

# Копируем requirements.txt
COPY --chown=appuser:appuser requirements.txt .

# Устанавливаем Python зависимости
RUN pip install --no-cache-dir -r requirements.txt daphne

# Копируем код приложения
COPY --chown=appuser:appuser . .

# Создаем файл прокси если его нет
RUN if [ ! -f /app/proxies.txt ]; then \
        echo "# Пример файла прокси" > /app/proxies.txt && \
        echo "# Формат: username:password@ip:port" >> /app/proxies.txt && \
        echo "# Или просто: ip:port" >> /app/proxies.txt && \
        echo "# Один прокси на строку" >> /app/proxies.txt && \
        echo "" >> /app/proxies.txt && \
        echo "# Примеры:" >> /app/proxies.txt && \
        echo "# user123:pass456@192.168.1.100:8080" >> /app/proxies.txt && \
        echo "# 192.168.1.100:8080" >> /app/proxies.txt && \
        echo "# proxy.example.com:3128" >> /app/proxies.txt; \
    fi && \
    chmod 644 /app/proxies.txt

# Копируем entrypoint скрипты
COPY --chown=appuser:appuser entrypoint.sh /usr/local/bin/entrypoint.sh
COPY --chown=appuser:appuser entrypoint_simple.sh /usr/local/bin/entrypoint_simple.sh
RUN chmod +x /usr/local/bin/entrypoint.sh /usr/local/bin/entrypoint_simple.sh

# Фиксируем права для media директорий
RUN chown -R appuser:appuser /app/media && \
    chmod -R 775 /app/media

# Создаем директории для Chrome
RUN mkdir -p /tmp/chrome_profiles && \
    chown -R appuser:appuser /tmp/chrome_profiles && \
    chmod -R 755 /tmp/chrome_profiles

# Собираем статические файлы
RUN python manage.py collectstatic --noinput

# Открываем порт
EXPOSE 8000

# Устанавливаем entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint_simple.sh"] 